#include "MCTargetDesc/LAINMCTargetDesc.h"
#include "LAIN.h"
#include "LAINTargetMachine.h"
#include "llvm/CodeGen/MachineFrameInfo.h"
#include "llvm/CodeGen/MachineFunction.h"
#include "llvm/CodeGen/MachineInstrBuilder.h"
#include "llvm/CodeGen/MachineRegisterInfo.h"
#include "llvm/CodeGen/SelectionDAG.h"
#include "llvm/CodeGen/SelectionDAGISel.h"
#include "llvm/CodeGen/TargetLowering.h"
#include "llvm/IR/CallingConv.h"
#include "llvm/IR/Constants.h"
#include "llvm/IR/DerivedTypes.h"
#include "llvm/IR/Function.h"
#include "llvm/IR/Intrinsics.h"
#include "llvm/IR/LLVMContext.h"
#include "llvm/Support/Compiler.h"
#include "llvm/Support/Debug.h"
#include "llvm/Support/ErrorHandling.h"
#include "llvm/Support/raw_ostream.h"

using namespace llvm;

#define DEBUG_TYPE "LAIN-isel"

namespace {

class LAINDAGToDAGISel : public SelectionDAGISel {
  const LAINSubtarget *Subtarget = nullptr;

public:
  static char ID;
  LAINDAGToDAGISel() = delete;
  explicit LAINDAGToDAGISel(LAINTargetMachine &tm) : SelectionDAGISel(ID, tm) {}

  bool runOnMachineFunction(MachineFunction &MF) override {
    Subtarget = &MF.getSubtarget<LAINSubtarget>();
    return SelectionDAGISel::runOnMachineFunction(MF);
  }

  void Select(SDNode *N) override;

  StringRef getPassName() const override {
    return "LAIN DAG->DAG Pattern Instruction Selection";
  }

// Include the pieces autogenerated from the target description.
#include "LAINGenDAGISel.inc"
};

} // end anonymous namespace

char LAINDAGToDAGISel::ID = 0;

/// This pass converts a legalized DAG into a LAIN-specific DAG, ready for
/// instruction scheduling.
FunctionPass *llvm::createLAINISelDag(LAINTargetMachine &TM) {
  return new LAINDAGToDAGISel(TM);
}

void LAINDAGToDAGISel::Select(SDNode *Node) {
  if (Node->isMachineOpcode()) {
    LLVM_DEBUG(dbgs() << "== "; Node->dump(CurDAG); dbgs() << "\n");
    Node->setNodeId(-1);
    return;
  }
  SDLoc DL(Node);
  SelectCode(Node);
}